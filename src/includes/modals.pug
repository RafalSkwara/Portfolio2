.modal.storefront-modal
	.modal__header
		h3 Media Market Storefront
		.close.flex-center-horizontal
			i.fa.fa-times
	.modal__content

		h4 Technologies
		ul
			li React
			li Redux
			li React Router
			li Sass
			li Webpack
		h4 Process
		p A project that has been a real challenge for me. Working on it has taught me a lot about React itself as well as about Redux.
		p The idea behind the project was to build a prototype for an imaginary online store with some back end functionality simulated. I chose to move necessary logic to Redux so that reducers could be used by components for necessary calculations and storing and manipulating data.
		p There was no need to setting up a server since I didn't want to overcomplicate the project so I created a json file to simulate data which normally would be provided by back end
		h4 Result overview
		p The store populates product containers with products based on data it gets from json. It features a functioning search field, dynamically rendered product pages, special offer section with countdown component and working mechanism for adding products to cart, wishlist and compare page.
		p Apart from this all, there is a possibility of changing the language and currency displayed thorughout the site.
		p The site is responsible, although some minor bugs may still be present.
		p <b>To do:</b> add more pages, introduce dynamic routing, expand product pages, add transitions.

.modal.spacex-modal
	.modal__header
		h3 SpaceX Launch List
		.close.flex-center-horizontal
			i.fa.fa-times
	.modal__content
		h4 Technologies
		ul
			li React
			li Redux
			li Sass
			li Webpack
		h4 Process
		p My first encounter with React. My goal was to find out how apps are built with this framework and to understand basic rules and concepts behind React.
		p Important part of creating the project was introducing external API requests -- I chose axios for this. After this had been done, I managed to make React deal with the data and display it in readable manner.Adding Redux was the latest improvement.
		h4 Result overview
		p The app connects to SpaceX API and downloads data for all their rocket launches. Then they are displayed chronologically with basic data. The results can be filtered to show only launches of particular rocket type.
		p Clicking on an item renders a component which displays details about the launch including counter which counts down time remaining to launch if the launch is yet to take place.
		p <b>To do:</b>improve RWD and accessibility, add transitions, add proper loading screen.
.modal.twitch-modal
	.modal__header
		h3 Twitch
		.close.flex-center-horizontal
			i.fa.fa-times
	.modal__content
		
		h4 Technologies
		ul
			li JS
			li jQuery
			li Jade/Pug
			li Sass
		h4 Process
		p This is one of the projects made by me during me taking the Free Code Camp courses. Nothing huge is going on here but the goal was simple - to learn how to use external APIs.
		h4 Result overview
		p The app is pretty simple. It queries the Twitch API and gets data about a few Twitch channels. Then it puts them into the list.
		p Data can be filtered. User can see which channels are live at the moment and which are offline.
		p <b>To do: </b>the styling, bleh...
.modal.skydelve-modal
	.modal__header
		h3 Skydelve
		.close.flex-center-horizontal
			i.fa.fa-times
	.modal__content
		
		h4 Technologies
		ul
			li React
			li Redux
			li Router
			li Sass
			li Bootstrap 4
			li Webpack
		h4 Process
		p Skydelve is still under developent but I want to show it anyway. It's not fully functional yet, but it will be soon.
		p The NASA's API is great and I wanted to show off some of its features. I also wanted to really understand React CSS Transitions so I used them a bit on this project. The app features three (soon four) functionalities that use NASA API. 
		h4 Result overview
		p The user can check what was the Astronomy picture of the day for any chosen date and read somme interesting explanation provided by NASA. 
		p Another part of the app shows pictures of Earth on a given date, both natural and enhanced (there's a toggle switch to choose between them). Once the picture is displayed the user can "rotate" the Earth to see it from a different angle.
		p Third part shows data of asteroids observed or bound to be observed on any chosen date and in a week that follows it. The details include diameter or relative speed of the asteroid.
		p <b>To do:</b> add Mars Rover photos section, fix unexpecting flexbox behaviors, fix loading spinner issue in EPIC section.
.modal.duel-modal
	.modal__header
		h3 The Duel
		.close.flex-center-horizontal
			i.fa.fa-times
	.modal__content
		
		h4 Technologies
		ul
			li HTML5
			li CSS3
			li JavaScript (ES6)
		h4 Process
		p While learning about ES6 classes in JS I thought about making something that would help get familiar with how they work in practice. And what comes to mind when you think of classes? To mo it was obvious.
		p RPGs.
		h4 Result overview
		p The game is quite simple but it didn't feel that way when I was working on it. No AI is involved so it's best for two players.
		p The players pick one of the heroes, all of which have their attributes, weapons, shields etc. Then each player takes her turn to attack and algorithms calculate damage that these attacks inflict.
		p Surprisingly, it's quite fun!
.modal.sarbat-modal
	.modal__header
		h3 The Duel
		.close.flex-center-horizontal
			i.fa.fa-times
	.modal__content
	
		h4 Technologies
		ul
			li HTML5
			li CSS3
			li JavaScript (ES6)
		h4 Process
		p It was going to be a simple recreation of a free design I found in the Web. It's as simple as can be. No preprocessors, frameworks, automation scripts.
		p Pure HTML, CSS and JS. OK, a few JS libraries came in handy. It did show me how important all the front end tools are. I missed Gulp, Sass and Pug but, overall, I'm happy with the result.
		h4 Result overview
		p A responsive landing page for a creative agency. That's what this project is. All flexbox based, the layout is smooth yet simple.
		p The website has some essentials like mobile navigation, form, slideshow, and some fun CSS transitions, too.  
.modal.spinners-modal
	.modal__header
		h3 Spinners
		.close.flex-center-horizontal
			i.fa.fa-times
	.modal__content
		
		h4 Technologies
		ul
			li CSS3 animations
			li Pug
			li Sass
		h4 Process
		p I would call it rather a doodle then a project but it was fun to create it and to play with animations to create a sample of four loading spinners
		h4 Result overview
		p They're spinners and they spin. Simple as that, sorry.
.modal.cube-modal
	.modal__header
		h3 The Cube
		.close.flex-center-horizontal
			i.fa.fa-times
	.modal__content
		
		h4 Technologies
		ul
			li CSS3
			li Pug
			li Sass
		h4 Process
		p I thought I might try some CSS3 animations and transitions combined with 3D perspective. I guess one of the most common examples is some sort of rotating cube. It felt right to start there, so I did.
		h4 Result overview
		p This small project consists of a cube and very minimal JS to controll which side of the cube is facing forward. Nothing to brag about but it's still a nice CSS feature to know.
.modal.weather-modal
	.modal__header
		h3 Weather
		.close.flex-center-horizontal
			i.fa.fa-times
	.modal__content
	
		h4 Technologies
		ul
			li Pug
			li Sass
			li jQuery
			li REST
		h4 Process
		p Another one made for FreeCodeCamp's course. A bit outdated, since it uses jQuery to get data from APIs but a relevant insight into my first time with handling REST data.
		h4 Result overview
		p This widget starts by localizing the user with IPInfo API, which turned out to be more reliable than browser's geolocalisation feature, especially if you want to use Codepen.
		p After this the localisation data is handled and used to retrieve weather info from Apixu open API. The data is then displayed together with an icon symbolising weather conditions.
		p There is also possibility to change temperature units from Celsius to Fahrenheit with one click.